# Promise処理で複数の方法で処理する

複数の方法を用意しておいて、優先度の高い順に処理成否を確かめる。  
成功した場合は処理を抜ける。  


```js
const first = (arg) => new Promise((resolve, reject) => {
  console.log('-- 1 --');
  if (arg) return resolve('1');
  return reject(false);
});

const second = (arg) => new Promise((resolve, reject) => {
  console.log('-- 2 --');
  if (arg) return resolve('2');
  return reject(false);
});

const third = (arg) => new Promise((resolve, reject) => {
  console.log('-- 3 --');
  if (arg) return resolve('3');
  return reject(false);
});


const checkes = (args) => new Promise((resolve, reject) => {
  Promise.resolve(true)

    // 1つ目の方法
    .then(()    => first(args[0]))
    .then((res) => resolve(res))

    // 2つ目の方法
    .catch(()   => second(args[1]))
    .then((res) => resolve(res))

    // 3つ目の方法
    .catch(()   => third(args[2]))
    .then((res) => resolve(res))

    // いずれも失敗の場合
    .catch(()   => console.log('all failture.'));
});



const main = (args) => {
  checkes(args).then(console.log);
};

main([1, 0, 0]);// 1
main([0, 1, 0]);// 2
main([0, 0, 1]);// 3
main([0, 0, 0]);// all failture.
```